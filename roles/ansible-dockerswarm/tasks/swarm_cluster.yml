---
- include_vars: ansible-dockerswarm_vars.yml
  tags: [systemd]
- include_vars: encrypted_vars.yml
  tags: [systemd]

- name: Check if "Swarm Mode" is enabled.
  shell: docker info
  changed_when: False
  register: docker_info
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: Init "Swarm Mode" on the first manager.
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and inventory_hostname == groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: Get the worker join-token.
  shell: docker swarm join-token -q worker
  changed_when: False
  register: docker_worker_token
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  when: "'docker_swarm_worker' in group_names"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: Get the manager join-token.
  shell: docker swarm join-token -q manager
  changed_when: False
  register: docker_manager_token
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  when: "'docker_swarm_manager' in group_names
    and inventory_hostname != groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: Declare the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Distribute the fact containing address of the first Swarm manager.
  set_fact:
    docker_manager_address: "{{hostvars[groups['docker_swarm_manager'][0]]['docker_manager_address'] }}"
  when: "inventory_hostname != groups['docker_swarm_manager'][0]"

- name: Join the pending Swarm worker nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_worker_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'docker_swarm_worker' in group_names"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: Join the pending Swarm manager nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_manager_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'docker_swarm_manager' in group_names
    and inventory_hostname != groups['docker_swarm_manager'][0]"
  tags:
    - skip_ansible_lint # Suppressing the linter

- name: Install docker-clean script
  copy:
    content: |
      #!/bin/bash
      docker system prune -a -f
    dest: /usr/local/bin/docker-clean
    mode: '0755'
    owner: 'root'
    group: 'root'
  when: docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

- name: Install docker-clean.service
  copy:
    dest: /etc/systemd/system/docker-clean.service
    content: |
      [Unit]
      Description=Clean out old containers and unused images

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/docker-clean
  when: docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

- name: Install docker-clean.timer
  copy:
    dest: /etc/systemd/system/docker-clean.timer
    content: |
      [Unit]
      Description=Clean out old containers and unused images

      [Timer]
      OnCalendar=*:0

      [Install]
      WantedBy=timers.target
  register: docker_stack_clean_timer
  when: docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

- name: Enable docker-clean timer
  systemd:
    name: docker-clean.timer
    daemon_reload: true
    enabled: true
  when: docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

- name: Restart docker-clean.timer if it changed
  systemd:
    name: docker-clean.timer
    daemon_reload: true
    state: restarted
  when: docker_stack_clean_timer is defined and docker_stack_clean_timer.changed and docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

- name: Deactivate docker-clean timer
  systemd:
    name: docker-clean.timer
    daemon_reload: true
    enabled: false
    state: stopped
  ignore_errors: true  # Might fail when the job is not present
  when: not docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

- name: Uninstall docker-clean components
  file:
    dest: '{{ item }}'
    state: absent
  with_items:
    - /usr/local/bin/docker-clean
    - /etc/systemd/system/docker-clean.service
    - /etc/systemd/system/docker-clean.timer
  when: not docker_stack_add_cleanjob
  become: yes
  tags: [systemd]

#- name: Get list of labels
#  command: >-
#         docker inspect
#         --format {% raw %}'{{range $key, $value := .Spec.Labels}}{{printf "%s\n" $key}}{{end}}'{% endraw %}
#         {{ ansible_hostname }}
#  register: docker_swarm_labels
#  changed_when: False
#  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
#  delegate_facts: True
#  tags:
#    - skip_ansible_lint
#    - swarm_labels

#- name: Remove labels from swarm node
#  command: docker node update --label-rm {{ item }} {{ ansible_hostname }}
#  with_items: "{{ docker_swarm_labels.stdout_lines }}"
#  when: item not in swarm_labels
#  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
#  delegate_facts: True
#  tags:
#    - skip_ansible_lint
#    - swarm_labels

#- name: Asign labels to swarm nodes | if any
#  command: docker node update --label-add {{ item }}=true {{ ansible_hostname }}
#  when: item not in docker_swarm_labels.stdout_lines
#  with_items:
#    - "{{ swarm_labels  | default([]) }}"
#  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
#  delegate_facts: True
#  tags:
#    - skip_ansible_lint
#    - swarm_labels
