---
# Configure docker-stack
- include_vars: ansible-dockerswarm_vars.yml
- include_vars: encrypted_vars.yml

- name: Create configuration directory
  file:
    path: /etc/compose/
    state: directory
    mode: 0755
    owner: ubuntu
    group: ubuntu
  become: yes
  tags: [service-def-path]

- name: Install stack definition file
  copy:
    src: prod.yml
    dest: /etc/compose/prod.yml
    mode: 0640
    owner: ubuntu
    group: ubuntu
  tags: [service-def-path]
  become: yes

- name: Add django secret key to swarm
  docker_secret:
    name: PROD_SECRET_KEY
    data: "{{ prod_secret_key }}"
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Add db_user to swarm
  docker_secret:
    name: POSTGRES_USER
    data: "{{ prod_db_user }}"
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Add db password to swarm
  docker_secret:
    name: POSTGRES_PASSWORD
    data: "{{ prod_db_password }}"
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Add db name to swarm
  docker_secret:
    name: POSTGRES_DB
    data: "{{ prod_db_name }}"
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Add django debug value to swarm
  docker_secret:
    name: DJANGO_DEBUG
    data: "False"
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Add sendgrid API key to swarm.
  docker_secret:
    name: SENDGRID_API_KEY
    data: "{{ sendgrid_api_key }}"
    state: present
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Validate configuration
  command: docker-compose -f prod.yml config -q
  args:
    chdir: /etc/compose/radiam-api/api

# Install and start services

- name: Install docker-stack.service
  copy:
    src: docker-stack.service
    dest: /etc/systemd/system/docker-stack.service
  register: docker_stack_service
  become: yes
  tags: [service-def-path]

- name: Enable docker-stack service
  systemd:
    name: docker-stack.service
    daemon_reload: true
    enabled: true
  become: yes
  tags: [service-def-path]

- name: Restart service if service configuration changed
  systemd:
    name: docker-stack.service
    daemon_reload: true
    state: restarted
  become: yes
  when: docker_stack_service.changed and packer_build_name is not defined
  tags: [service-def-path]

- name: Reload and apply configuration
  systemd:
    name: docker-stack.service
    state: reloaded
  become: yes
  tags: [service-def-path]

- name: Install docker-stack-reload.service
  copy:
    src: docker-stack-reload.service
    dest: /etc/systemd/system/docker-stack-reload.service
  become: yes
  when: docker_stack_auto_reload
  tags: [service-def-path]

- name: Install docker-stack-reload.timer
  copy:
    src: docker-stack-reload.timer
    dest: /etc/systemd/system/docker-stack-reload.timer
  register: docker_stack_reload_timer
  become: yes
  when: docker_stack_auto_reload
  tags: [service-def-path]

- name: Enable docker-stack-reload.timer
  systemd:
    name: docker-stack-reload.timer
    daemon_reload: true
    enabled: true
  become: yes
  when: docker_stack_auto_reload
  tags: [service-def-path]

- name: Restart docker-stack-reload.timer if it changed
  systemd:
    name: docker-stack-reload.timer
    daemon_reload: true
    state: restarted
  when: docker_stack_reload_timer.changed and packer_build_name is not defined and docker_stack_auto_reload
  become: yes
  tags: [service-def-path]

