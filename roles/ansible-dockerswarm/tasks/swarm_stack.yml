---
# Configure docker-stack
- include_vars: ansible-dockerswarm_vars.yml

- name: Create configuration directory
  file:
    path: /etc/compose/radiam-api
    state: directory
    mode: 0700
    owner: ubuntu
    group: ubuntu
  become: yes

- name: Get updated files from git repository
  git:
    repo: https://{{ gituser }}:{{ gitpassword }}@{{ repo_uri }}
    dest: /etc/compose/radiam-api

- name: Deploy stack on swarm
  shell: docker stack deploy --prune --compose-file /etc/compose/radiam-api/api/prod.yml radiam-full
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"

- name: Validate configuration
  command: docker-compose -f prod.yml config -q
  args:
    chdir: /etc/compose/radiam-api/api

# Install and start services

- name: Install docker-stack.service
  copy:
    src: docker-stack.service
    dest: /etc/systemd/system/docker-stack.service
  register: docker_stack_service
  become: yes

- name: Enable docker-stack service
  systemd:
    name: docker-stack.service
    daemon_reload: true
    enabled: true
  become: yes

- name: Restart service if service configuration changed
  systemd:
    name: docker-stack.service
    daemon_reload: true
    state: restarted
  become: yes
  when: docker_stack_service.changed and packer_build_name is not defined

- name: Reload and apply configuration
  systemd:
    name: docker-stack.service
    state: reloaded
  become: yes

- name: Install docker-stack-reload.service
  copy:
    src: docker-stack-reload.service
    dest: /etc/systemd/system/docker-stack-reload.service
  become: yes

- name: Install docker-stack-reload.timer
  copy:
    src: docker-stack-reload.timer
    dest: /etc/systemd/system/docker-stack-reload.timer
  register: docker_stack_reload_timer
  become: yes

- name: Enable docker-stack-reload.timer
  systemd:
    name: docker-stack-reload.timer
    daemon_reload: true
    enabled: true
  become: yes

- name: Restart docker-stack-reload.timer if it changed
  systemd:
    name: docker-stack-reload.timer
    daemon_reload: true
    state: restarted
  when: docker_stack_reload_timer.changed and packer_build_name is not defined
  become: yes

- name: Install docker-clean script
  copy:
    content: |
      #!/bin/bash
      set -euo pipefail

      function step() { echo $@; }

      step "Removing containers created / exited >= ~1h ago..."
      CONTAINERS=$(docker ps -a | gawk '/(hours?|days?|weeks?|months?) ago\s+(Created|Exited)/{ print $1 }' | xargs)
      [ -n "${CONTAINERS}" ] && docker rm ${CONTAINERS}

      step "Removing unused and dangling images..."
      docker image prune -a -f
    dest: /usr/local/bin/docker-clean
    mode: '0755'
    owner: 'root'
    group: 'root'
  when: docker_stack_add_cleanjob
  become: yes

- name: Install docker-clean.service
  copy:
    dest: /etc/systemd/system/docker-clean.service
    content: |
      [Unit]
      Description=Clean out old containers and unused images

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/docker-clean
  when: docker_stack_add_cleanjob
  become: yes

- name: Install docker-clean.timer
  copy:
    dest: /etc/systemd/system/docker-clean.timer
    content: |
      [Unit]
      Description=Clean out old containers and unused images

      [Timer]
      OnCalendar=*:0

      [Install]
      WantedBy=timers.target
  register: docker_stack_clean_timer
  when: docker_stack_add_cleanjob
  become: yes

- name: Enable docker-clean timer
  systemd:
    name: docker-clean.timer
    daemon_reload: true
    enabled: true
  when: docker_stack_add_cleanjob
  become: yes

- name: Restart docker-clean.timer if it changed
  systemd:
    name: docker-clean.timer
    daemon_reload: true
    state: restarted
  when: docker_stack_clean_timer is defined and docker_stack_clean_timer.changed and packer_build_name is not defined and docker_stack_add_cleanjob
  become: yes

- name: Deactivate docker-clean timer
  systemd:
    name: docker-clean.timer
    daemon_reload: true
    enabled: false
    state: stopped
  ignore_errors: true  # Might fail when the job is not present
  when: not docker_stack_add_cleanjob
  become: yes

- name: Uninstall docker-clean components
  file:
    dest: '{{ item }}'
    state: absent
  with_items:
    - /usr/local/bin/docker-clean
    - /etc/systemd/system/docker-clean.service
    - /etc/systemd/system/docker-clean.timer
  when: not docker_stack_add_cleanjob
  become: yes

