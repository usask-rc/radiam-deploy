version: '3.6'

services:

  # Elasticsearch. See README for necessary host settings.
  elasticsearch:
    image: build.radiam.ca/elastic
    volumes:
      - elasticsearch_data_vol:/usr/share/elasticsearch/data
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      placement:
        constraints: [node.role == manager]

  # Postgres
  db:
    image: build.radiam.ca/postgres
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data_vol:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [node.role == manager]
    # Secrets go from ansible -> filesystem in container after deploy -> specially parsed environment variables
    # the postgres binary knows about as defined below with the _FILE suffix.
    secrets:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
      - POSTGRES_USER_FILE=/run/secrets/POSTGRES_USER
      - POSTGRES_DB_FILE=/run/secrets/POSTGRES_DB

  # Memcached for Django
  memcached:
    image: build.radiam.ca/memcached
    restart: on-failure
    deploy:
      mode: global

  # Django startup.
  radiamapi:
    restart: on-failure
    image: build.radiam.ca/radiam-api
    command: ["/wait-for-it/wait-for-it.sh", "db:5432", "-s", "--timeout=60", "--", "gunicorn", "--bind", ":8000", "--reload", "radiamsec.wsgi:application"]
    environment:
      - SESSIONAUTH=1
    healthcheck:
      test: "curl -X OPTIONS http://localhost:8000 -H 'Origin: http://localhost:8000' -H 'Access-Control-Request-Headers: Origin, Accept, Content-Type' -H 'Access-Control-Request-Method: GET' || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - elasticsearch
      - db
      - migration
      - memcached
    volumes:
      - static_volume:/django/static  # bind the static volume
    deploy:
      placement:
        constraints: [node.role == manager]
    secrets:
      - DJANGO_DEBUG
      - PROD_SECRET_KEY
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - SENDGRID_API_KEY

  # Run database migrations for Django on startup.
  migration:
    image: build.radiam.ca/radiam-api
    command: ["/wait-for-it/wait-for-it.sh", "db:5432", "-s", "--timeout=60", "--", "python", "/code/manage.py", "migrate", "--noinput"]
    restart: on-failure
    depends_on:
      - db
    deploy:
      placement:
        constraints: [node.role == manager]
    secrets:
      - DJANGO_DEBUG
      - PROD_SECRET_KEY
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - SENDGRID_API_KEY

# Radiam GUI
  radiamgui:
    image: build.radiam.ca/radiam-gui # Pull the prebuilt GUI image from the registry
    restart: on-failure
    deploy:
      mode: global

  nginx:
    restart: on-failure
    image: build.radiam.ca/nginx-radiam
    ports:
      - 80:80
      - 443:443
    volumes:
      # Static volume shared with radiam-api
      - static_volume:/django/static
      - icon_uploads_volume:/django/uploads
      # Host locations with ssl certs provisioned via ansible (https://github.com/usask-rc/radiam-deploy/).
      - /etc/ssl/:/etc/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - radiamapi
      - radiamgui

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "9090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

volumes:
      elasticsearch_data_vol:
      postgres_data_vol:
      static_volume:
      icon_uploads_volume:

secrets:
  DJANGO_DEBUG:
    external: true
  PROD_SECRET_KEY:
    external: true
  POSTGRES_USER:
    external: true
  POSTGRES_PASSWORD:
    external: true
  POSTGRES_DB:
    external: true
  SENDGRID_API_KEY:
    external: true

